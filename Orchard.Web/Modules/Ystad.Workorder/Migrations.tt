<#@ template debug="true" hostspecific="false" language="C#"  #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>

<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

using Orchard.Core.Settings.Metadata;
using Orchard.Data;
using Orchard.Data.Migration;
using Orchard.ContentManagement.MetaData;
using Orchard.Core.Contents.Extensions;
using System;
using System.Data;
using Orchard.Indexing;
using Orchard.Logging;
using Ystad.Workorder.Models;

namespace Ystad.Workorder
{
    public class Migrations : DataMigrationImpl
    {
        <#JObject jsonFile = JObject.Parse(File.ReadAllText("C:/Users/sattline/Desktop/Template Project/OrchardTemplate/Orchard-dev/src/Orchard.Web/Modules/Ystad.Workorder/Migrationfile.json"));#>
        <# int version = (int)jsonFile["CurrentMigrationNr"];#>


	<#	
		CreateMethod1(1,jsonFile);
				for (int i = 2 ; i<=version;i++){
								
					
					CreateMethod2(i, jsonFile);
							
				}
	#>
		}
}
       
<#+ void CreateMethod1(int version,JObject jsonFile){ #>


public int Create()
        {
            ContentDefinitionManager.AlterTypeDefinition("<#=jsonFile["ContentTypeName"]#>", builder =>
             builder
			<#+for(int i = 0; i<jsonFile["WithPart"].Count(); i++){#>
						
			.WithPart("<#=jsonFile["WithPart"][i].ToString()#>")
			
            <#+}#>

	<#+if((bool)jsonFile["Creatable"]==true)#>
	.Creatable()
	<#+if((bool)jsonFile["Draftable"]==true)#>
	.Draftable()
	<#+if((bool)jsonFile["Listable"]==true)#>
	.Listable()
	<#+if((bool)jsonFile["Securable"]==true){#>
	.Securable()
	
				<#+}#>);
            

	SchemaBuilder.CreateTable("<#=jsonFile["TableName"]#>Record", table =>
    table.ContentPartRecord()
		
<#+for(int i = 0;i<jsonFile["TableColumn"].Count();i++){#>
				<#+if((int)jsonFile["TableColumn"][i]["Version"] == version){#>
				.Column<<#=jsonFile["TableColumn"][i]["Type"]#>>("<#=jsonFile["TableColumn"][i]["PropName"]#>")
<#+}#>
<#+}#>);

ContentDefinitionManager.AlterTypeDefinition("<#=jsonFile["ContentTypeName"]#>", builder =>
builder.WithPart("<#=jsonFile["TableName"]#>"));
            return 1;
	
        }
<#+ } #>
<#+ void CreateMethod2(int i,JObject jsonFile){ #>
public int UpdateFrom<#=i-1#>(){


	
<#+for(int j = 0; j < jsonFile["TableColumn"].Count(); j++){#>
	<#+if((int)jsonFile["TableColumn"][j]["Version"] == i){#>
	SchemaBuilder.AlterTable("<#=jsonFile["TableName"]#>Record", table =>
	table.AddColumn<<#=jsonFile["TableColumn"][j]["Type"]#>>("<#=jsonFile["TableColumn"][j]["PropName"]#>"));
								<#+}#>	
							
				<#+}#>
           
            return <#=i#>;
	
			}
<#+ } #>

